CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(deploy_trt)

set(BUILD_TEST TRUE)
set(BUILD_SAMPLE TRUE)
set(BUILD_DEBUG FALSE)

IF (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
	IF (CMAKE_SYSTEM_NAME MATCHES "Darwin")
		SET(NEWCXX_ENABLED_FLAG "-std=c++11 -stdlib=libc++ -Wall -O2")
	ELSE()
		SET(NEWCXX_ENABLED_FLAG "-std=c++11 -Wall -Wno-mismatched-tags -O2")
	ENDIF()
ELSEIF (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
	SET(NEWCXX_ENABLED_FLAG "-std=gnu++11 -Wall")
ELSE()
	MESSAGE(FATAL_ERROR, "Only GCC and clang is supported for now.")
ENDIF()

SET(CMAKE_CXX_FLAGS ${NEWCXX_ENABLED_FLAG})
## only for Debug
IF(BUILD_DEBUG)
	SET(CMAKE_BUILD_TYPE "Debug") 
	SET(CMAKE_CXX_FLAGS_DEBUG "$ENV{CXXFLAGS} -O0 -Wall -g -ggdb")
	SET(CMAKE_CXX_FLAGS_RELEASE "$ENV{CXXFLAGS} -O3 -Wall")
ENDIF()
MESSAGE(STATUS "CMAKE_CXX_FLAGS=${CMAKE_CXX_FLAGS}")

# CMake path
list(APPEND CMAKE_MODULE_PATH "${PROJECT_SOURCE_DIR}/cmake")
list(APPEND CMAKE_PREFIX_PATH "${PROJECT_SOURCE_DIR}/cmake")
set(DEPS_LIB_DIR ${PROJECT_SOURCE_DIR}/deps)

# CUDA
#FIND_PACKAGE(CUDA)
IF(NOT CUDA_FOUND)
	SET(USE_CUDA_VERSION 9.0)
	MESSAGE(STATUS "Not Found CUDA in machine env, use ${DEPS_LIB_DIR}/cuda${USE_CUDA_VERSION}")
	SET(CUDA_TOOLKIT_ROOT_DIR ${DEPS_LIB_DIR}/cuda${USE_CUDA_VERSION})
	SET(CUDA_INCLUDE_DIRS ${CUDA_TOOLKIT_ROOT_DIR}/include)
	SET(CUDA_LIBRARY_PATH ${CUDA_TOOLKIT_ROOT_DIR}/lib64)
	SET(CUDA_LIBRARIES 	${CUDA_LIBRARY_PATH}/libcublas.so
		${CUDA_LIBRARY_PATH}/libcudart.so
		${CUDA_LIBRARY_PATH}/libnvblas.so
		${CUDA_LIBRARY_PATH}/libnvrtc.so)
ELSE()
	MESSAGE(STATUS "FIND CUDA in system environment")
	MESSAGE(STATUS "CUDA_INCLUDE_DIRS ${CUDA_INCLUDE_DIRS}")
	MESSAGE(STATUS "CUDA_LIBRARIES ${CUDA_LIBRARIES}")
ENDIF()

# CUDNN
FIND_PACKAGE(cuDNN)
IF(NOT CUDNN_FOUND)
	SET(USE_CUDNN_VERSION 7.5)
	MESSAGE(STATUS "Not Found CUDNN in machine env, use libs at ${DEPS_LIB_DIR}/cudnn${USE_CUDNN_VERSION}")
	SET(CUDNN_ROOT_DIR ${DEPS_LIB_DIR}/cudnn${USE_CUDNN_VERSION})
	SET(CUDNN_INCLUDE_DIRS ${CUDNN_ROOT_DIR}/include)
	SET(CUDNN_LIBRARY_PATH ${CUDNN_ROOT_DIR}/lib64)
	SET(CUDNN_LIBRARIES ${CUDNN_LIBRARY_PATH}/libcudnn.so)
ELSE()
	MESSAGE(STATUS "FIND cuDNN in system environment")
	MESSAGE(STATUS "CUDNN_INCLUDE_DIRS ${CUDNN_INCLUDE_DIRS}")
	MESSAGE(STATUS "CUDNN_LIBRARIES ${CUDNN_LIBRARIES}")
ENDIF()

# TENSORRT
FIND_PACKAGE(TensorRT)
IF(NOT TensorRT_FOUND)
	MESSAGE(STATUS "Not Found TensorRT in machine env, use libs at ${DEPS_LIB_DIR}")
	SET(TensorRT_ROOT ${DEPS_LIB_DIR}/tensorrt5.1.2)
	SET(TensorRT_INCLUDE_DIR ${TensorRT_ROOT}/include)
	SET(TENSORRT_LIBRARY_PATH ${TensorRT_ROOT}/lib)
	SET(TensorRT_LIBRARIES ${TENSORRT_LIBRARY_PATH}/libnvinfer.so
		${TENSORRT_LIBRARY_PATH}/libnvinfer_plugin.so
		${TENSORRT_LIBRARY_PATH}/libnvcaffe_parser.so
		${TENSORRT_LIBRARY_PATH}/libnvonnxparser.so)
ELSE()
	MESSAGE(STATUS "FIND TensorRT in system environment")
	MESSAGE(STATUS "TensorRT_INCLUDE_DIR ${TensorRT_INCLUDE_DIR}")
	MESSAGE(STATUS "TensorRT_LIBRARIES ${TensorRT_LIBRARIES}")
ENDIF()

SET(TENSORRT5_INCLUDE_DIRS 
	${TensorRT_INCLUDE_DIR}
	${CUDNN_INCLUDE_DIRS}
	${CUDA_INCLUDE_DIR})

SET(TENSORRT_LIB_DIRS
	${TensorRT_LIBRARIES}
	${CUDA_LIBRARIES}
	${CUDNN_LIBRARIES})

INCLUDE_DIRECTORIES(
	${TENSORRT5_INCLUDE_DIRS}	
	${CMAKE_CURRENT_SOURCE_DIR}/include)

FILE(GLOB_RECURSE DEPLOY_TRT_SRC 
	src/*.cpp 
	src/extplugin/*.cpp)
ADD_LIBRARY(${CMAKE_PROJECT_NAME} SHARED ${DEPLOY_TRT_SRC})
ADD_LIBRARY(${CMAKE_PROJECT_NAME}_s ${DEPLOY_TRT_SRC})
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME} PUBLIC ${TENSORRT_LIB_DIRS})
TARGET_LINK_LIBRARIES(${CMAKE_PROJECT_NAME}_s PUBLIC ${TENSORRT_LIB_DIRS})
SET(INSTALL_DIR ${CMAKE_CURRENT_SOURCE_DIR}/install)
INSTALL(TARGETS ${CMAKE_PROJECT_NAME} DESTINATION ${INSTALL_DIR}/lib)
INSTALL(DIRECTORY include DESTINATION ${INSTALL_DIR}/include)

IF(BUILD_TEST)
	# download gtest
	IF(NOT DEFINED GTEST_DIR)
		MESSAGE(STATUS "Downloading Google Test to ${CMAKE_SOURCE_DIR}/deps/gtest (define GTEST_DIR to avoid it)")
		CONFIGURE_FILE(cmake/DownloadGoogleTest.cmake "${CMAKE_SOURCE_DIR}/deps/gtest/CMakeLists.txt")
		EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" -G "${CMAKE_GENERATOR}" .
			WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/deps/gtest/googletest")

		EXECUTE_PROCESS(COMMAND "${CMAKE_COMMAND}" --build .
			WORKING_DIRECTORY "${CMAKE_SOURCE_DIR}/deps/gtest/googletest")

		SET(GTEST_DIR "${CMAKE_SOURCE_DIR}/deps/gtest/googletest")
	ENDIF()

	FILE(GLOB_RECURSE TEST_SRC test/*.cpp)
	ADD_EXECUTABLE(test_deploytrt ${TEST_SRC})
	TARGET_INCLUDE_DIRECTORIES(test_deploytrt PUBLIC ${GTEST_DIR}/include ${CMAKE_SOURCE_DIR}/test)
	TARGET_LINK_LIBRARIES(test_deploytrt PUBLIC ${CMAKE_PROJECT_NAME}_s ${GTEST_DIR}/libgtest.a pthread)
ENDIF()

IF(BUILD_SAMPLE)
	file(GLOB_RECURSE CPP_SRC_LIST ${CMAKE_CURRENT_SOURCE_DIR}/samples/*.cpp)
	foreach(FILE_PATH ${CPP_SRC_LIST})
		STRING(REGEX REPLACE ".+/(.+)\\..*" "\\1" FILE_NAME ${FILE_PATH})
		add_executable(${FILE_NAME} ${FILE_PATH} src/logger.cpp)
		TARGET_INCLUDE_DIRECTORIES(${FILE_NAME} PUBLIC ${TENSORRT_INCLUDE_DIRS})
		TARGET_LINK_LIBRARIES(${FILE_NAME} PUBLIC ${TENSORRT_LIB_DIRS})
	endforeach()
ENDIF()